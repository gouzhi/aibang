<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jee="http://www.springframework.org/schema/jee" 
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/context 
	   					   http://www.springframework.org/schema/context/spring-context-3.0.xsd 
	   					   http://www.springframework.org/schema/beans 
	   					   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	   					   http://www.springframework.org/schema/tx 
	   					   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	   					   http://www.springframework.org/schema/aop 
	   					   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	   					   http://www.springframework.org/schema/jee 
	   					   http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
	   					   http://www.springframework.org/schema/util 
	   					   http://www.springframework.org/schema/util/spring-util-3.0.xsd" 
	  default-autowire="byName" default-lazy-init="true">
    <context:annotation-config />

    <context:component-scan base-package="com.cifex.business" />
    <context:component-scan base-package="com.cifex.framework" />

    <context:component-scan base-package="com.cifex.framework.chinanrp" />
    
    <bean id="propertyConfigurer" class="com.cifex.framework.utils.Const">
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
                <value>classpath*:system.properties</value>
                <value>classpath*:chinapnr.properties</value>
            </list>
        </property>
    </bean>
   
    <bean id="chinaPnrConfig" class="com.cifex.framework.chinanrp.common.ChinaPnrConfig" >
        <property name="version" value="${chinapnr.version}" />
		<property name="gateway" value="${chinapnr.gateway}" />
		<property name="merCustId" value="${chinapnr.merCustId}" />
		<property name="merId" value="${chinapnr.merId}" />
		<property name="retHost" value="${chinapnr.retHost}" />
        <property name="bgHost" value="${chinapnr.bgHost}" />
        <property name="retUrl" value="${chinapnr.retUrl}" />
		<property name="bgRetUrl" value="${chinapnr.bgRetUrl}" />
        <property name="adminRetHost" value="${chinapnr.adminRetHost}" />
        <property name="adminBgHost" value="${chinapnr.adminBgHost}" />
        <property name="adminRetUrl" value="${chinapnr.adminRetUrl}" />
        <property name="adminBgRetUrl" value="${chinapnr.adminBgRetUrl}" />
        <property name="moveRetHost" value="${chinapnr.moveRetHost}" />
        <property name="moveRetUrl" value="${chinapnr.moveRetUrl}" />
        <property name="moveBgHost" value="${chinapnr.moveBgHost}" />
        <property name="moveBgRetUrl" value="${chinapnr.moveBgRetUrl}" />
		<property name="merKeyFile" value="${chinapnr.merKeyFile}" />
		<property name="feeAccount" value="${chinapnr.feeAccount}" />
		<property name="idType" value="${chinapnr.idType}" />
		<property name="pgKeyFile" value="${chinapnr.pgKeyFile}" /> 
    </bean>
    <!-- 阿里 druid数据库连接池 -->
    <!-- 写数据源-->
	<bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${write.jdbc.url}" />
         <property name="username" value="${write.jdbc.username}" />
         <property name="password" value="${write.jdbc.password}" />
         <property name="driverClassName" value="${write.jdbc.driverClassName}" />
         <property name="filters" value="[]" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${validationQuery}" />  
         <property name="testWhileIdle" value="${testWhileIdle}" />  
         <property name="testOnBorrow" value="${testOnBorrow}" />  
         <property name="testOnReturn" value="${testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${logAbandoned}" />
	</bean>
    <!-- 读数据源一，可多个-->
	<bean id="readDataSource1" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${read.jdbc.url}" />
         <property name="username" value="${read.jdbc.username}" />
         <property name="password" value="${read.jdbc.password}" />
         <property name="driverClassName" value="${read.jdbc.driverClassName}" />
         <property name="filters" value="[]" />
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${minIdle}" />
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
         <property name="validationQuery" value="${validationQuery}" />
         <property name="testWhileIdle" value="${testWhileIdle}" />
         <property name="testOnBorrow" value="${testOnBorrow}" />
         <property name="testOnReturn" value="${testOnReturn}" />
         <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->
         <property name="logAbandoned" value="${logAbandoned}" />
	</bean>
    <!--一写多读 -->
    <bean id="readWriteDataSource" class="com.cifex.framework.utils.datasourcecore.ReadWriteDataSource">
        <property name="writeDataSource" ref="writeDataSource"/>
        <property name="readDataSourceMap">
            <map>
                <entry key="readDataSource1" value-ref="readDataSource1"/>
                <entry key="readDataSource2" value-ref="readDataSource1"/>
                <entry key="readDataSource3" value-ref="readDataSource1"/>
                <entry key="readDataSource4" value-ref="readDataSource1"/>
            </map>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="readWriteDataSource"/>
    </bean>

    <!-- TransactionManager定义 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="readWriteDataSourceTransactionProcessor" class="com.cifex.framework.utils.datasourcecore.ReadWriteDataSourceProcessor">
        <property name="forceChoiceReadWhenWrite" value="false"/>
    </bean>
 	
	<tx:advice id="txAdvice-provider" transaction-manager="transactionManager">
		<tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="put*" propagation="REQUIRED"/>
            <tx:method name="process*" propagation="REQUIRED" />
            <tx:method name="do*" propagation="REQUIRED" />
            
            
            <tx:method name="query*" read-only="true"/>
            <tx:method name="use*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>

            <tx:method name="*" propagation="REQUIRED"/>
			<!--<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />-->
		</tx:attributes>
	</tx:advice>
	
	<aop:aspectj-autoproxy proxy-target-class="true" />
 	
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="transactionPointCut" expression="(execution(* com.cifex.*.provider.system..*(..)) or execution(* com.cifex.*.provider.user..*(..)))" />
        <aop:advisor pointcut-ref="transactionPointCut" advice-ref="txAdvice-provider" />

        <!-- 通过AOP切面实现读/写库选择 -->
        <aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">
            <aop:around pointcut-ref="transactionPointCut" method="determineReadOrWriteDB"/>
        </aop:aspect>
    </aop:config>



</beans>
