<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="${className}">

	<resultMap id="RM_${className}" type="${basepackage}.transfer.model.dto.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="<@namespace/>columns">
	    <![CDATA[
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	    ]]>
	</sql>

    <sql id="<@namespace/>tbcolumns">
	    <![CDATA[
		<#list table.columns as column>tb.${column.sqlName}<#if column_has_next>,</#if></#list>
	    ]]>
	</sql>
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="<@namespace/>insert" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}">
    <![CDATA[
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	<@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
        </#list>        
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="<@namespace/>update" >
    <![CDATA[
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	        </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next> AND </#if>
	        </#list>	        
    ]]>
	</update>


   
	
    <update id="<@namespace/>remove">
    <![CDATA[
        UPDATE ${table.sqlName} SET
	       IS_DEL=1,
	       DELETE_TIME=<@mapperEl 'deleteTime'/> 
        WHERE 
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </update>
    
    
    <delete id="<@namespace/>delete">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </delete>
    
    <select id="<@namespace/>getById" resultMap="RM_${className}">
		SELECT <include refid="<@namespace/>columns" />
	    <![CDATA[
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		        </#list>    
	    ]]>
	</select>
	
	<sql id="<@namespace/>findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <#list table.columns as column>
	       <#if column.isDateTimeColumn>
	       <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower}Begin)">
				AND tb.${column.sqlName} >= <@mapperEl column.columnNameFirstLower+"Begin"/>
		   </if>
		   <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower}End)">
				AND tb.${column.sqlName} &lt;= <@mapperEl column.columnNameFirstLower+"End"/>
		   </if>
	       <#else>
	       <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower})">
				AND tb.${column.sqlName} = <@mapperEl column.columnNameFirstLower/>
			</if>
	       </#if>
	       </#list>			
		</where>
	</sql>
		
    <select id="<@namespace/>findPage.count" resultType="long">
        SELECT count(*) FROM ${table.sqlName} tb 
		<include refid="<@namespace/>findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="<@namespace/>findPage" resultType="map">
    	SELECT <include refid="<@namespace/>tbcolumns" />
	    FROM ${table.sqlName} tb
		<include refid="<@namespace/>findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
    </select>

    <#list table.columns as column>
    <#if column.unique && !column.pk>
    <select id="<@namespace/>getBy${column.columnName}" resultMap="RM_${className}" parameterType="${column.javaType}">
	    SELECT <include refid="<@namespace/>tbcolumns"/>
	    <![CDATA[
	        FROM ${table.sqlName} tb where tb.${column.sqlName} = <@mapperEl column.columnNameLower/>
	    ]]>
    </select>
    
    </#if>
	</#list>
	
	<select id="<@namespace/>findAll" resultMap="RM_${className}">
    	SELECT <include refid="<@namespace/>columns" />
	    FROM ${table.sqlName}  
    </select>
    
     <select id="<@namespace/>findList" resultMap="RM_${className}">
    	SELECT <include refid="<@namespace/>tbcolumns" />
	    FROM ${table.sqlName} tb
		<include refid="<@namespace/>findPage.where"/>
    </select>
    
</mapper>

