<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="AbUsersInvite">

	<resultMap id="RM_AbUsersInviteAndBase" type="com.aibang.transfer.model.dto.AbUsersInvite">
        <result property="id" column="ID"/>
        <result property="inviteType" column="INVITE_TYPE"/>
        <result property="userId" column="USER_ID"/>
        <result property="inviteUserId" column="INVITE_USER_ID"/>
        <result property="inviteCode" column="INVITE_CODE"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="createIp" column="CREATE_IP"/>
        <collection property="inviteBase" column="USERID"  ofType="com.aibang.transfer.model.dto.AbUserBase">
			<id property="id" column="USERID"/>
        	<result property="username" column="USERNAME"/>       	
		</collection>
	</resultMap>
	<resultMap id="RM_AbUsersInvite" type="com.aibang.transfer.model.dto.AbUsersInvite">
        <result property="id" column="ID"/>
        <result property="inviteType" column="INVITE_TYPE"/>
        <result property="userId" column="USER_ID"/>
        <result property="inviteUserId" column="INVITE_USER_ID"/>
        <result property="inviteCode" column="INVITE_CODE"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="createIp" column="CREATE_IP"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="AbUsersInvite.columns">
	    <![CDATA[
		ID,INVITE_TYPE,USER_ID,INVITE_USER_ID,INVITE_CODE,CREATE_TIME,CREATE_IP
	    ]]>
	</sql>

    <sql id="AbUsersInvite.tbcolumns">
	    <![CDATA[
		tb.ID,tb.INVITE_TYPE,tb.USER_ID,tb.INVITE_USER_ID,tb.INVITE_CODE,tb.CREATE_TIME,tb.CREATE_IP,
		b.ID AS USERID,b.USERNAME
	    ]]>
	</sql>
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="AbUsersInvite.insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO ab_users_invite (
        	
        	INVITE_TYPE ,
        	USER_ID ,
        	INVITE_USER_ID ,
        	INVITE_CODE ,
        	CREATE_TIME ,
        	CREATE_IP 
        ) VALUES (
        	
        	#{inviteType} ,
        	#{userId} ,
        	#{inviteUserId} ,
        	#{inviteCode} ,
        	#{createTime} ,
        	#{createIp} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="AbUsersInvite.update" >
    <![CDATA[
        UPDATE ab_users_invite SET
	        INVITE_TYPE = #{inviteType} ,
	        USER_ID = #{userId} ,
	        INVITE_USER_ID = #{inviteUserId} ,
	        INVITE_CODE = #{inviteCode} ,
	        CREATE_TIME = #{createTime} ,
	        CREATE_IP = #{createIp} 
        WHERE 
	        ID = #{id} 
    ]]>
	</update>


   
	
    <update id="AbUsersInvite.remove">
    <![CDATA[
        UPDATE ab_users_invite SET
	       IS_DEL=1,
	       DELETE_TIME=#{deleteTime} 
        WHERE 
        ID = #{id} 
    ]]>
    </update>
    
    
    <delete id="AbUsersInvite.delete">
    <![CDATA[
        DELETE FROM ab_users_invite WHERE
        ID = #{id} 
    ]]>
    </delete>
    
    <select id="AbUsersInvite.getById" resultMap="RM_AbUsersInvite">
		SELECT <include refid="AbUsersInvite.columns" />
	    <![CDATA[
		    FROM ab_users_invite 
	        WHERE 
		        ID = #{id} 
	    ]]>
	</select>
	
	<sql id="AbUsersInvite.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND tb.ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(inviteType)">
				AND tb.INVITE_TYPE = #{inviteType}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND tb.USER_ID = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(inviteUserId)">
				AND tb.INVITE_USER_ID = #{inviteUserId}
			</if>
	       <if test="@Ognl@isNotEmpty(inviteCode)">
				AND tb.INVITE_CODE = #{inviteCode}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND tb.CREATE_TIME >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND tb.CREATE_TIME &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(createIp)">
				AND tb.CREATE_IP = #{createIp}
			</if>
		</where>
	</sql>
		
    <select id="AbUsersInvite.findPage.count" resultType="long">
        SELECT count(*) FROM ab_users_invite tb 
		<include refid="AbUsersInvite.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="AbUsersInvite.findPage" resultType="map">
    	SELECT <include refid="AbUsersInvite.tbcolumns" />
	    FROM ab_users_invite tb
		<include refid="AbUsersInvite.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
		<if test="@Ognl@isNotEmpty(offset) and @Ognl@isNotEmpty(pageSize)">
		 limit ${offset},${pageSize} 
		</if>
    </select>

	
	<select id="AbUsersInvite.findAll" resultMap="RM_AbUsersInvite">
    	SELECT <include refid="AbUsersInvite.columns" />
	    FROM ab_users_invite  
    </select>
    
    
    <!-- 获取验证码-->
    <select id="AbUsersInvite.list" resultType="String">
		SELECT
			distinct a.INVITE_CODE
		FROM
			ab_users_info a where a.USER_ID = #{userId}
	</select>
	
	<!-- 获取 inviteUserId-->
	 <select id="AbUsersInvite.getByUserId" resultType="Integer">
		SELECT tb.INVITE_USER_ID
		    FROM ab_users_invite tb
	        WHERE 
		        USER_ID = #{userId} 
	</select>
	<!-- 获取邀请人的账户信息 -->
	<select id="AbUsersInvite.getByBaseId" resultMap="RM_AbUsersInviteAndBase">
		SELECT b.USERNAME
		    FROM ab_users_invite tb
		    left join ab_user_base b on b.ID=tb.INVITE_USER_ID
	        WHERE 
		        tb.USER_ID = #{userId} 
	</select>
</mapper>

